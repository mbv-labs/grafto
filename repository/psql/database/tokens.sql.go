// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTokenByHash = `-- name: DeleteTokenByHash :exec
delete from tokens
where hash = $1
`

func (q *Queries) DeleteTokenByHash(ctx context.Context, hash string) error {
	_, err := q.db.Exec(ctx, deleteTokenByHash, hash)
	return err
}

const insertToken = `-- name: InsertToken :exec
insert into tokens
    (id, created_at, hash, expires_at, meta_information) values ($1, $2, $3, $4, $5) 
returning id, created_at, hash, expires_at, meta_information
`

type InsertTokenParams struct {
	ID              uuid.UUID
	CreatedAt       pgtype.Timestamptz
	Hash            string
	ExpiresAt       pgtype.Timestamptz
	MetaInformation []byte
}

func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) error {
	_, err := q.db.Exec(ctx, insertToken,
		arg.ID,
		arg.CreatedAt,
		arg.Hash,
		arg.ExpiresAt,
		arg.MetaInformation,
	)
	return err
}

const queryTokenByHash = `-- name: QueryTokenByHash :one
select id, created_at, hash, expires_at, meta_information from tokens where hash=$1
`

func (q *Queries) QueryTokenByHash(ctx context.Context, hash string) (Token, error) {
	row := q.db.QueryRow(ctx, queryTokenByHash, hash)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Hash,
		&i.ExpiresAt,
		&i.MetaInformation,
	)
	return i, err
}
