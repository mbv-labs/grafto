// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.543
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"github.com/riverqueue/river/rivertype"
	"text/template"
	"time"

	"github.com/vanng822/go-premailer/premailer"
)

const backgroundJobErrorTmplName = "background_job_error_email"

type BackgroundJobErrorMail struct {
	JobID           int64
	AttemptedAt     time.Time
	Kind            string
	MetaData        string
	Err             error
	AttemptedErrors []rivertype.AttemptError
}

var _ MailTemplateHandler = (*BackgroundJobErrorMail)(nil)

func (b BackgroundJobErrorMail) GenerateTextVersion() (string, error) {
	textFile, err := template.ParseFS(textTemplates, fmt.Sprintf("%s.txt", backgroundJobErrorTmplName))
	if err != nil {
		return "", err
	}

	var textBody bytes.Buffer
	if err := textFile.Execute(&textBody, BackgroundJobErrorMail{}); err != nil {
		return "", err
	}

	return textBody.String(), nil
}

func (b BackgroundJobErrorMail) GenerateHtmlVersion() (string, error) {
	var html bytes.Buffer
	if err := b.template().Render(context.Background(), &html); err != nil {
		return "", err
	}

	premailer, err := premailer.NewPremailerFromString(html.String(), premailer.NewOptions())
	if err != nil {
		return "", err
	}

	inlineHtml, err := premailer.Transform()
	if err != nil {
		return "", err
	}

	return inlineHtml, nil
}

func (b BackgroundJobErrorMail) Render(ctx context.Context, w io.Writer) error {
	return b.template().Render(ctx, w)
}

func (b *BackgroundJobErrorMail) template() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
